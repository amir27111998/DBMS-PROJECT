function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { EventEmitter } from 'events';
import uuidv4 from 'uuid/v4';
import { TYPES } from '../constants/types';

var NotificationManager = function (_EventEmitter) {
  _inherits(NotificationManager, _EventEmitter);

  function NotificationManager() {
    _classCallCheck(this, NotificationManager);

    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

    _this.queue = [];
    return _this;
  }

  /**
   *
   * @param {object} options
   * @param {string} options.title
   * @param {string} options.message
   * @param {bool} options.showCloseButton
   * @param {bool} options.timeOut
   * @param {bool} options.priority
   * @param {function} options.onClick
   * @param {string} type
   */


  NotificationManager.prototype.create = function create(options, type) {
    var defaultOptions = {
      id: uuidv4(),
      type: type || TYPES.INFO,
      title: null,
      message: null,
      timeOut: 5000
    };

    if (options && options.priority) {
      this.queue.unshift(Object.assign(defaultOptions, options));
    } else {
      this.queue.push(Object.assign(defaultOptions, options));
    }

    this.emitChange();
  };

  NotificationManager.prototype.checkOptions = function checkOptions(input) {
    if (typeof input === 'string') return { message: input };else return input;
  };

  /**
   *
   * @param {object} options
   * @param {string} options.title
   * @param {string} options.message
   * @param {bool} options.showCloseButton
   * @param {bool} options.timeOut
   * @param {bool} options.priority
   * @param {string} options.position
   * @param {function} options.onClick
   */


  NotificationManager.prototype.info = function info(options) {
    this.create(this.checkOptions(options), TYPES.INFO);
  };

  /**
   *
   * @param {object} options
   * @param {string} options.title
   * @param {string} options.message
   * @param {bool} options.showCloseButton
   * @param {bool} options.timeOut
   * @param {bool} options.priority
   * @param {string} options.position
   * @param {function} options.onClick
   */


  NotificationManager.prototype.success = function success(options) {
    this.create(this.checkOptions(options), TYPES.SUCCESS);
  };

  /**
   *
   * @param {object} options
   * @param {string} options.title
   * @param {string} options.message
   * @param {bool} options.showCloseButton
   * @param {bool} options.timeOut
   * @param {bool} options.priority
   * @param {string} options.position
   * @param {function} options.onClick
   */


  NotificationManager.prototype.warning = function warning(options) {
    this.create(this.checkOptions(options), TYPES.WARNING);
  };

  /**
   *
   * @param {object} options
   * @param {string} options.title
   * @param {string} options.message
   * @param {bool} options.showCloseButton
   * @param {bool} options.timeOut
   * @param {bool} options.priority
   * @param {string} options.position
   * @param {function} options.onClick
   */


  NotificationManager.prototype.error = function error(options) {
    this.create(this.checkOptions(options), TYPES.ERROR);
  };

  /**
   *
   * @param {object} options
   * @param {string} options.title
   * @param {string} options.message
   * @param {bool} options.showCloseButton
   * @param {bool} options.timeOut
   * @param {bool} options.priority
   * @param {function} options.onClick
   * @param {function} options.bgColor
   * @param {function} options.iconClassName
   */


  NotificationManager.prototype.custom = function custom(options) {
    this.create(this.checkOptions(options), TYPES.CUSTOM);
  };

  NotificationManager.prototype.remove = function remove(notification) {
    this.queue = this.queue.filter(function (n) {
      return notification.id !== n.id;
    });
    this.emitChange();
  };

  NotificationManager.prototype.emitChange = function emitChange() {
    this.emit(TYPES.CHANGE, this.queue);
  };

  NotificationManager.prototype.addChangeListener = function addChangeListener(callback) {
    this.addListener(TYPES.CHANGE, callback);
  };

  NotificationManager.prototype.removeChangeListener = function removeChangeListener(callback) {
    this.removeListener(TYPES.CHANGE, callback);
  };

  return NotificationManager;
}(EventEmitter);

export default new NotificationManager();