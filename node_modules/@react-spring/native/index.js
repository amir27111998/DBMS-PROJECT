import { View, Text, Image, StyleSheet } from 'react-native';
import { Animated, isAnimated, withExtend, createAnimatedComponent, AnimatedObject, AnimatedStyle } from '@react-spring/animated';
import { createStringInterpolator } from '@react-spring/shared/stringInterpolation';
import { Globals, is } from '@react-spring/shared';
import colorNames from '@react-spring/shared/colors';
export * from '@react-spring/core';

class AnimatedTransform extends Animated {
  constructor(transforms) {
    super();
    this._transforms = transforms;
  }

  getValue() {
    return this._transforms.map(transform => {
      let result = {};

      for (var key in transform) {
        var value = transform[key];
        result[key] = isAnimated(value) ? value.getValue() : value;
      }

      return result;
    });
  }

  getAnimatedValue() {
    return this._transforms.map(transform => {
      let result = {};

      for (var key in transform) {
        var value = transform[key];
        result[key] = isAnimated(value) ? value.getAnimatedValue() : value;
      }

      return result;
    });
  }

  attach() {
    this._transforms.forEach(transform => {
      for (var key in transform) {
        var value = transform[key];
        if (isAnimated(value)) value.addChild(this);
      }
    });
  }

  detach() {
    this._transforms.forEach(transform => {
      for (var key in transform) {
        var value = transform[key];
        if (isAnimated(value)) value.removeChild(this);
      }
    });
  }

}

const elements = {
  View,
  Text,
  Image
};
const animated = withExtend(createAnimatedComponent).extend(elements);

Globals.assign({
  defaultElement: View,
  colorNames,
  createStringInterpolator,
  applyAnimatedValues: (instance, props) => instance.setNativeProps ? instance.setNativeProps(props) : false,
  createAnimatedTransform: transform => new AnimatedTransform(transform),

  createAnimatedStyle(styles) {
    styles = StyleSheet.flatten(styles);

    if (is.obj(styles.shadowOffset)) {
      styles.shadowOffset = new AnimatedObject(styles.shadowOffset);
    }

    return new AnimatedStyle(styles);
  }

});

export { animated as a, animated };
//# sourceMappingURL=index.js.map
