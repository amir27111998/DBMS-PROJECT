'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var reactNative = require('react-native');
var _inheritsLoose = _interopDefault(require('@babel/runtime/helpers/inheritsLoose'));
var animated$1 = require('@react-spring/animated');
var stringInterpolation = require('@react-spring/shared/stringInterpolation');
var shared = require('@react-spring/shared');
var colorNames = _interopDefault(require('@react-spring/shared/colors'));
var core = require('@react-spring/core');

var AnimatedTransform =
/*#__PURE__*/
function (_Animated) {
  _inheritsLoose(AnimatedTransform, _Animated);

  function AnimatedTransform(transforms) {
    var _this;

    _this = _Animated.call(this) || this;
    _this._transforms = transforms;
    return _this;
  }

  var _proto = AnimatedTransform.prototype;

  _proto.getValue = function getValue() {
    return this._transforms.map(function (transform) {
      var result = {};

      for (var key in transform) {
        var value = transform[key];
        result[key] = animated$1.isAnimated(value) ? value.getValue() : value;
      }

      return result;
    });
  };

  _proto.getAnimatedValue = function getAnimatedValue() {
    return this._transforms.map(function (transform) {
      var result = {};

      for (var key in transform) {
        var value = transform[key];
        result[key] = animated$1.isAnimated(value) ? value.getAnimatedValue() : value;
      }

      return result;
    });
  };

  _proto.attach = function attach() {
    var _this2 = this;

    this._transforms.forEach(function (transform) {
      for (var key in transform) {
        var value = transform[key];
        if (animated$1.isAnimated(value)) value.addChild(_this2);
      }
    });
  };

  _proto.detach = function detach() {
    var _this3 = this;

    this._transforms.forEach(function (transform) {
      for (var key in transform) {
        var value = transform[key];
        if (animated$1.isAnimated(value)) value.removeChild(_this3);
      }
    });
  };

  return AnimatedTransform;
}(animated$1.Animated);

var elements = {
  View: reactNative.View,
  Text: reactNative.Text,
  Image: reactNative.Image
};
var animated = animated$1.withExtend(animated$1.createAnimatedComponent).extend(elements);

shared.Globals.assign({
  defaultElement: reactNative.View,
  colorNames: colorNames,
  createStringInterpolator: stringInterpolation.createStringInterpolator,
  applyAnimatedValues: function applyAnimatedValues(instance, props) {
    return instance.setNativeProps ? instance.setNativeProps(props) : false;
  },
  createAnimatedTransform: function createAnimatedTransform(transform) {
    return new AnimatedTransform(transform);
  },
  createAnimatedStyle: function createAnimatedStyle(styles) {
    styles = reactNative.StyleSheet.flatten(styles);

    if (shared.is.obj(styles.shadowOffset)) {
      styles.shadowOffset = new animated$1.AnimatedObject(styles.shadowOffset);
    }

    return new animated$1.AnimatedStyle(styles);
  }
});

Object.keys(core).forEach(function (key) {
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return core[key];
    }
  });
});
exports.a = animated;
exports.animated = animated;
//# sourceMappingURL=index.cjs.js.map
